---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import Hero from "../components/hero.astro";
import { getCollection } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";


// REDIRECTION CONFIG - Set to false to disable redirection and enable the Astro site
const REDIRECT_TO_ZZTT_HTML = false;

const posts = (await getCollection("works")).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="en" class="dark">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		{REDIRECT_TO_ZZTT_HTML && (
			<meta http-equiv="refresh" content="0;url=/zztt.html" />
		)}
		<style>
			:root {
				/* --background-color: #000000; */
				--text-color: #ffffff;
			}
			body {
				background-color: var(--background-color);
				color: var(--text-color);
				overflow-y: auto;
			}
			.hero-container {
				height: 100vh;
				width: 100%;
				position: relative;
				top: 0;
				left: 0;
			}
			main {
				color: var(--text-color);
				padding: 2rem;
				max-width: 1200px;
				margin: 0 auto;
				position: relative;
				z-index: 1;
				background: linear-gradient(
					to bottom,
					transparent 0%,
					var(--background-color) 300px
				);
			}
			.intro {
				font-size: 1.5rem;
				margin-bottom: 4rem;
				text-align: center;
			}
			.works-section {
				margin-top: 4rem;
			}
			.works-grid {
				display: grid;
				gap: 4rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			.work-item {
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 2rem;
				align-items: center;
			}
			.work-item:nth-child(even) {
				direction: rtl;
			}
			.work-item:nth-child(even) .work-content {
				direction: ltr;
			}
			.work-image {
				width: 100%;
				height: auto;
				border-radius: 12px;
				transition: transform 0.3s ease;
			}
			.work-image:hover {
				transform: scale(1.02);
			}
			.work-content {
				display: flex;
				flex-direction: column;
				gap: 1rem;
			}
			.work-title {
				font-size: 2rem;
				margin: 0;
				color: var(--text-color);
			}
			.work-date {
				color: #666;
				font-size: 1rem;
			}
			.work-synopsis {
				color: #999;
				line-height: 1.6;
			}
			a {
				color: inherit;
				text-decoration: none;
			}
			@media (max-width: 768px) {
				.work-item {
					grid-template-columns: 1fr;
					gap: 1rem;
				}
				.work-item:nth-child(even) {
					direction: ltr;
				}
			}
		</style>
	</head>
	<body>
		{!REDIRECT_TO_ZZTT_HTML && (
			<>
				<Header />
				<div class="hero-container">
					<Hero />
				</div>
				<main>
					<p class="intro">
						Sound artist and composer based in Bern, Switzerland.
					</p>
					<section class="works-section">
						<ul class="works-grid">
							{
								posts.map((post) => (
									<li class="work-item">
										<a
											href={`/works/${post.id}/`}
											class="work-image-container"
										>
											<img
												width={600}
												height={300}
												src={post.data.heroImage}
												alt=""
												class="work-image"
											/>
										</a>
										<div class="work-content">
											<a href={`/works/${post.id}/`}>
												<h2 class="work-title">
													{post.data.title}
												</h2>
											</a>
											<p class="work-date">
												<FormattedDate
													date={post.data.pubDate}
												/>
											</p>
											<p class="work-synopsis">
												{post.data.description}
											</p>
										</div>
									</li>
								))
							}
						</ul>
					</section>
				</main>
				<Footer />
			</>
		)}
		
		{!REDIRECT_TO_ZZTT_HTML && (
			<script>
				// Create a function to initialize the audio context with user interaction
				const initAudioContext = async () => {
					try {
						// Create a new AudioContext
						const audioContext = new AudioContext();

						// Create a silent audio buffer
						const buffer = audioContext.createBuffer(1, 1, 22050);
						const source = audioContext.createBufferSource();
						source.buffer = buffer;
						source.connect(audioContext.destination);
						source.start(0);

						console.log(
							"AudioContext initialized:",
							audioContext.state,
						);

						// Wait a small amount of time to ensure AudioContext is ready
						await new Promise((resolve) => setTimeout(resolve, 100));

						// Dispatch a custom event to notify hero.astro that it can start
						window.dispatchEvent(new CustomEvent("audioContextReady"));

						return true;
					} catch (error) {
						console.error("Error initializing AudioContext:", error);
						return false;
					}
				};

				// Add event listeners for user interaction
				const handleUserInteraction = async () => {
					console.log("User interaction detected");
					
					// Initialize audio context
					const success = await initAudioContext();
					
					if (success) {
						// Remove event listeners after successful initialization
						document.removeEventListener("click", handleUserInteraction);
						document.removeEventListener("touchstart", handleUserInteraction);
						document.removeEventListener("keydown", handleUserInteraction);
					}
				};

				// Add event listeners for user interaction
				document.addEventListener("click", handleUserInteraction);
				document.addEventListener("touchstart", handleUserInteraction);
				document.addEventListener("keydown", handleUserInteraction);
			</script>
		)}
	</body>
</html>
