<script>
    import * as THREE from "three";
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';
    import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';
    import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';
    import TWEEN from "@tweenjs/tween.js";
    import * as Tone from "tone";
    import CubeModule from "./cubeModule";
    import PulseModule from "./pulseModule";
  
    let scene: THREE.Scene;
    let camera: THREE.PerspectiveCamera;
    let renderer: THREE.WebGLRenderer;
    let composer: EffectComposer;
    let controls: OrbitControls;
    let pulse: any;
    let cube: any;
    let reverb: AudioNode;
    let listener: THREE.AudioListener;
    let reverbGain: GainNode; // Declare reverbGain at the top level
  
    const setupPostProcessing = () => {
      const renderPass = new RenderPass(scene, camera);
      composer = new EffectComposer(renderer);
      composer.addPass(renderPass);

      const bloomPass = new UnrealBloomPass(
        new THREE.Vector2(window.innerWidth, window.innerHeight),
        1.5,  // strength
        0.4,  // radius
        0.85  // threshold
      );
      composer.addPass(bloomPass);
    };

    const setupControls = () => {
      controls = new OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.dampingFactor = 0.05;
      controls.screenSpacePanning = false;
      controls.minDistance = 5;
      controls.maxDistance = 50;
      controls.maxPolarAngle = Math.PI / 2;
      controls.minPolarAngle = Math.PI / 2; // Lock vertical rotation
      controls.enableZoom = false; // Disable zoom
      controls.enablePan = false; // Disable panning
      controls.rotateSpeed = 0.5; // Adjust rotation speed

      // WASD Controls with audio listener update
      const onKeyDown = (event: KeyboardEvent) => {
        let moved = false;
        switch (event.code) {
          case 'KeyW':
            camera.position.z -= 1;
            moved = true;
            break;
          case 'KeyS':
            camera.position.z += 1;
            moved = true;
            break;
          case 'KeyA':
            camera.position.x -= 1;
            moved = true;
            break;
          case 'KeyD':
            camera.position.x += 1;
            moved = true;
            break;
        }
        
        if (moved) {
          // Update camera and listener orientation
          camera.updateMatrixWorld();
          listener.updateMatrixWorld();
        }
      };
      document.addEventListener('keydown', onKeyDown);

      // Update audio listener on orbit controls change
      controls.addEventListener('change', () => {
        camera.updateMatrixWorld();
        listener.updateMatrixWorld();
      });
    };

    const setupAudio = async () => {
      try {
        // Create and attach audio listener to camera
        listener = new THREE.AudioListener();
        camera.add(listener);

        // Get audio context and ensure it's running
        const audioContext = listener.context;
        
        // Try to resume the context - needed for browsers that require user interaction
        if (audioContext.state === 'suspended') {
          await audioContext.resume();
        }

        // Wait for the context to be running
        if (audioContext.state !== 'running') {
          await new Promise((resolve) => {
            const checkState = () => {
              if (audioContext.state === 'running') {
                resolve(true);
              } else {
                requestAnimationFrame(checkState);
              }
            };
            checkState();
          });
        }

        console.log('Audio context is running:', audioContext.state);

        // Create a shared ConvolverNode for reverb
        const convolver = audioContext.createConvolver();
        const reverbTime = 140.5; // Reverb duration in seconds
        const sampleRate = audioContext.sampleRate;
        const length = sampleRate * reverbTime;
        const impulse = audioContext.createBuffer(2, length, sampleRate);

        // Generate an impulse response for the convolver
        for (let channel = 0; channel < 2; channel++) {
          const channelData = impulse.getChannelData(channel);
          for (let i = 0; i < length; i++) {
            channelData[i] = (Math.random() * 2 - 1) * Math.exp(-i / (sampleRate * 0.1));
          }
        }

        convolver.buffer = impulse;

        // Create a GainNode to control the overall wet mix
        reverbGain = audioContext.createGain(); // Initialize reverbGain here
        reverbGain.gain.value = 1; // Adjust this value for the reverb effect mix

        // Connect the convolver to the gain node, then to the destination
        convolver.connect(reverbGain);
        reverbGain.connect(audioContext.destination);

        // Store the reverb node for modules to use
        reverb = convolver;
        console.log('Audio setup complete with reverb node.');
      } catch (error) {
        console.error('Error setting up audio:', error);
      }
    };

    const handleScroll = () => {
      // Get scroll position and window height
      const scrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;
    };

    window.addEventListener("scroll", handleScroll);

    const initialize = async () => {
      console.log("Initializing Hero...");
      // Initialize Tone.js
      await Tone.start();
  
  <div id="three-container" style="width: 100%; height: 100vh; position: block; top: 0; left: 0; z-index: -1; pointer-events: auto; background: linear-gradient(to bottom, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.8) 100%);"></div>
}
